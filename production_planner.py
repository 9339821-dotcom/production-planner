
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import os
import sys
from collections import defaultdict
import json
import re

class ProductionPlanner:
    def __init__(self, excel_file):
        self.excel_file = excel_file
        self.orders_df = None
        self.materials_df = None
        self.stock_data = {}
        self.reserved_materials = defaultdict(float)
        self.selected_orders = {}
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
        try:
            print("üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç —Å –∑–∞–∫–∞–∑–∞–º–∏
            self.orders_df = pd.read_excel(self.excel_file, sheet_name='–ó–∞–∫–∞–∑—ã')
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏
            self.materials_df = pd.read_excel(self.excel_file, sheet_name='–ü–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤')
            
            # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ—Å—Ç–∞—Ç–∫–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ "–ù–∞ —Å–∫–ª–∞–¥–µ"
            if '–ù–∞ —Å–∫–ª–∞–¥–µ' in self.materials_df.columns:
                for _, row in self.materials_df.iterrows():
                    material = row['–ú–∞—Ç–µ—Ä–∏–∞–ª']
                    if pd.notna(material):
                        stock = row['–ù–∞ —Å–∫–ª–∞–¥–µ'] if pd.notna(row['–ù–∞ —Å–∫–ª–∞–¥–µ']) else 0
                        self.stock_data[str(material).strip()] = float(stock)
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ: {len(self.orders_df)} –∑–∞–∫–∞–∑–æ–≤, {len(self.materials_df)} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
            raise
    
    def get_companies(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π"""
        return sorted([str(x) for x in self.orders_df['–ö–ª–∏–µ–Ω—Ç'].unique() if pd.notna(x)])
    
    def get_orders_by_company(self, company=None):
        """–ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏"""
        if company and company != "–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏":
            return self.orders_df[self.orders_df['–ö–ª–∏–µ–Ω—Ç'] == company]
        return self.orders_df
    
    def select_orders(self, order_numbers, shipment_dates):
        """–í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.selected_orders = {}
        
        for order_num in order_numbers:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∫ —Å—Ç—Ä–æ–∫–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            order_num_str = str(order_num).strip()
            order_data = self.orders_df[self.orders_df['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'].astype(str).str.strip() == order_num_str]
            
            if not order_data.empty:
                order_info = order_data.iloc[0].to_dict()
                order_info['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] = shipment_dates.get(order_num_str)
                self.selected_orders[order_num_str] = order_info
        
        print(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(self.selected_orders)}")
        return self.selected_orders
    
    def calculate_material_requirements(self):
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        if not self.selected_orders:
            return {"error": "–ù–µ –≤—ã–±—Ä–∞–Ω—ã –∑–∞–∫–∞–∑—ã"}
        
        required_materials = defaultdict(float)
        order_materials = {}
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        all_materials = []
        if '–ú–∞—Ç–µ—Ä–∏–∞–ª' in self.materials_df.columns:
            all_materials = [str(x).strip() for x in self.materials_df['–ú–∞—Ç–µ—Ä–∏–∞–ª'] if pd.notna(x)]
        
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞ –Ω–∞—Ö–æ–¥–∏–º –µ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for order_num in self.selected_orders.keys():
            order_num_clean = str(order_num).strip()
            
            # –ò—â–µ–º –∫–æ–ª–æ–Ω–∫—É —Å —ç—Ç–∏–º –∑–∞–∫–∞–∑–æ–º –≤ —Ç–∞–±–ª–∏—Ü–µ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
            order_columns = []
            for col in self.materials_df.columns:
                col_str = str(col).strip()
                # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –∏–ª–∏ —á–∞—Å—Ç–∏—á–Ω–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã)
                if order_num_clean == col_str or order_num_clean in col_str.split():
                    order_columns.append(col)
            
            if order_columns:
                for material_idx, material_name in enumerate(all_materials):
                    total_requirement = 0
                    
                    for order_col in order_columns:
                        if order_col in self.materials_df.columns:
                            value = self.materials_df[order_col].iloc[material_idx]
                            if pd.notna(value) and value != 0:
                                try:
                                    total_requirement += float(value)
                                except (ValueError, TypeError):
                                    pass
                    
                    if total_requirement > 0:
                        required_materials[material_name] += total_requirement
                        if order_num not in order_materials:
                            order_materials[order_num] = {}
                        order_materials[order_num][material_name] = total_requirement
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞—Ç–∫–∏ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        material_balance = {}
        purchase_requirements = {}
        
        for material, required in required_materials.items():
            current_stock = self.stock_data.get(material, 0)
            reserved = self.reserved_materials.get(material, 0)
            available_stock = max(0, current_stock - reserved)
            
            balance_after = available_stock - required
            material_balance[material] = {
                '–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å': current_stock,
                '–£–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ': reserved,
                '–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å': available_stock,
                '–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö': required,
                '–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ': balance_after
            }
            
            # –ï—Å–ª–∏ –±—É–¥–µ—Ç –¥–µ—Ñ–∏—Ü–∏—Ç - –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É
            if balance_after < 0:
                purchase_requirements[material] = abs(balance_after)
        
        return {
            'material_requirements': dict(required_materials),
            'material_balance': material_balance,
            'purchase_requirements': purchase_requirements,
            'order_materials': order_materials
        }
    
    def reserve_materials(self, order_numbers, shipment_dates):
        """–ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–æ–≤"""
        # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–∫–∞–∑—ã
        self.select_orders(order_numbers, shipment_dates)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏
        requirements = self.calculate_material_requirements()
        
        if 'error' in requirements:
            return requirements
        
        # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        for material, required in requirements['material_requirements'].items():
            self.reserved_materials[material] += required
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏
        self.save_reservation_data()
        
        return {
            'status': 'success',
            'reserved_orders': list(self.selected_orders.keys()),
            'reserved_materials': dict(self.reserved_materials),
            'requirements': requirements
        }
    
    def save_reservation_data(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
        serializable_orders = {}
        for order_num, order_info in self.selected_orders.items():
            serializable_order = order_info.copy()
            if '–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏' in serializable_order and serializable_order['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏']:
                if isinstance(serializable_order['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'], datetime):
                    serializable_order['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] = serializable_order['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'].isoformat()
            serializable_orders[order_num] = serializable_order
        
        reservation_data = {
            'reserved_materials': dict(self.reserved_materials),
            'selected_orders': serializable_orders,
            'timestamp': datetime.now().isoformat()
        }
        
        try:
            with open('reservations.json', 'w', encoding='utf-8') as f:
                json.dump(reservation_data, f, ensure_ascii=False, indent=2)
            print("üíæ –î–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    def load_reservation_data(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            if os.path.exists('reservations.json'):
                with open('reservations.json', 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    self.reserved_materials = defaultdict(float, data.get('reserved_materials', {}))
                    
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫
                    loaded_orders = data.get('selected_orders', {})
                    for order_num, order_info in loaded_orders.items():
                        if '–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏' in order_info and order_info['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏']:
                            try:
                                order_info['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] = datetime.fromisoformat(order_info['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'])
                            except (ValueError, TypeError):
                                order_info['–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏'] = None
                        self.selected_orders[order_num] = order_info
                    
                    print(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {len(self.selected_orders)} –∑–∞–∫–∞–∑–æ–≤")
                    return True
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False
    
    def clear_reservations(self):
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.reserved_materials.clear()
        self.selected_orders.clear()
        try:
            if os.path.exists('reservations.json'):
                os.remove('reservations.json')
                print("üóëÔ∏è –§–∞–π–ª —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return {"status": "success", "message": "–í—Å–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã"}
    
    def generate_purchase_order(self, requirements):
        """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É"""
        if not requirements.get('purchase_requirements'):
            return "–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫—É–ø–∫—É –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è - –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞–ª–∏—á–∏–∏", None
        
        purchase_text = "–ó–ê–Ø–í–ö–ê –ù–ê –ó–ê–ö–£–ü–ö–£ –ú–ê–¢–ï–†–ò–ê–õ–û–í\n"
        purchase_text += "=" * 50 + "\n"
        purchase_text += f"–î–∞—Ç–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
        purchase_text += f"–î–ª—è –∑–∞–∫–∞–∑–æ–≤: {', '.join(self.selected_orders.keys())}\n\n"
        
        purchase_text += "–°–ü–ò–°–û–ö –ú–ê–¢–ï–†–ò–ê–õ–û–í –î–õ–Ø –ó–ê–ö–£–ü–ö–ò:\n"
        purchase_text += "-" * 50 + "\n"
        
        total_cost_estimate = 0
        
        for material, quantity in requirements['purchase_requirements'].items():
            estimated_price = self.estimate_material_price(material)
            total_cost = estimated_price * quantity
            total_cost_estimate += total_cost
            
            purchase_text += f"üì¶ {material}\n"
            purchase_text += f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity:.2f}\n"
            purchase_text += f"   –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost:,.2f} —Ä—É–±.\n\n"
        
        purchase_text += f"–û–ë–©–ê–Ø –ü–†–ò–ú–ï–†–ù–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost_estimate:,.2f} —Ä—É–±.\n"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        filename = f"–ó–∞—è–≤–∫–∞_–Ω–∞_–∑–∞–∫—É–ø–∫—É_{datetime.now().strftime('%Y%m%d_%H%M')}.txt"
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(purchase_text)
            return purchase_text, filename
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏: {e}")
            return purchase_text, None
    
    def estimate_material_price(self, material):
        """–û—Ü–µ–Ω–æ—á–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª–∞"""
        material_lower = material.lower()
        
        # –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
        if any(x in material_lower for x in ['—Å—Ç–µ–∫–ª–æ', 'glass']):
            return 1500
        elif any(x in material_lower for x in ['–ø—Ä–æ—Ñ–∏–ª—å', 'profile']):
            return 800
        elif any(x in material_lower for x in ['–∞—Ä–≥–æ–Ω', 'argon']):
            return 200
        elif any(x in material_lower for x in ['–≥–µ—Ä–º–µ—Ç–∏–∫', 'sealant']):
            return 1500
        elif any(x in material_lower for x in ['–ª–µ–Ω—Ç–∞', 'tape']):
            return 300
        elif any(x in material_lower for x in ['—Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å', 'connector']):
            return 500
        else:
            return 1000  # —Ü–µ–Ω–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
    print("üè≠ –°–ò–°–¢–ï–ú–ê –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ò–ó–í–û–î–°–¢–í–ê")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞
    excel_file = "–û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_–∑–∞–∫–∞–∑–æ–≤.xlsx"
    if not os.path.exists(excel_file):
        print(f"‚ùå –§–∞–π–ª {excel_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ç—É –∂–µ –ø–∞–ø–∫—É, —á—Ç–æ –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É.")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try:
        planner = ProductionPlanner(excel_file)
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
        input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    planner.load_reservation_data()
    
    while True:
        print("\n" + "=" * 50)
        print("üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ")
        print("1. –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã")
        print("2. –í—ã–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("3. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("4. –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö")
        print("5. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É")
        print("6. –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("7. –í—ã—Ö–æ–¥")
        
        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-7): ").strip()
        
        if choice == '1':
            show_orders_menu(planner)
        elif choice == '2':
            select_orders_menu(planner)
        elif choice == '3':
            show_reservations(planner)
        elif choice == '4':
            calculate_requirements(planner)
        elif choice == '5':
            generate_purchase_order(planner)
        elif choice == '6':
            result = planner.clear_reservations()
            print(f"‚úÖ {result['message']}")
        elif choice == '7':
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...")
            break
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

def show_orders_menu(planner):
    """–ú–µ–Ω—é –ø–æ–∫–∞–∑–∞ –∑–∞–∫–∞–∑–æ–≤"""
    companies = planner.get_companies()
    print(f"\nüè¢ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ ({len(companies)}):")
    for i, company in enumerate(companies, 1):
        print(f"{i}. {company}")
    print(f"{len(companies) + 1}. –í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏")
    
    try:
        choice = int(input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é (1-{len(companies) + 1}): "))
        if 1 <= choice <= len(companies):
            selected_company = companies[choice - 1]
        else:
            selected_company = "–í—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏"
        
        orders = planner.get_orders_by_company(selected_company)
        print(f"\nüìä –ó–∞–∫–∞–∑—ã –¥–ª—è '{selected_company}' ({len(orders)}):")
        print("-" * 100)
        
        for _, order in orders.iterrows():
            order_num = str(order['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'])
            client = str(order['–ö–ª–∏–µ–Ω—Ç']) if pd.notna(order['–ö–ª–∏–µ–Ω—Ç']) else "–ù–µ —É–∫–∞–∑–∞–Ω"
            status = str(order.get('–°–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–∫–∞–∑–∞', '–ù–µ —É–∫–∞–∑–∞–Ω–æ'))
            cost = order.get('–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞', 0)
            area = order.get('–ü–ª–æ—â–∞–¥—å –∑–∞–∫–∞–∑–∞', 0)
            
            print(f"üìã {order_num} | {client} | {status} | {area} –º¬≤ | {cost:,.2f} —Ä—É–±.")
            
    except (ValueError, IndexError):
        print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

def select_orders_menu(planner):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤"""
    print("\nüéØ –í–´–ë–û–† –ó–ê–ö–ê–ó–û–í –î–õ–Ø –ü–õ–ê–ù–ò–†–û–í–ê–ù–ò–Ø")
    
    all_orders = [str(x) for x in planner.orders_df['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'].unique() if pd.notna(x)]
    print(f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(all_orders)}")
    
    print("\n–ü—Ä–∏–º–µ—Ä—ã –∑–∞–∫–∞–∑–æ–≤:")
    for order in all_orders[:10]:
        print(f"  - {order}")
    if len(all_orders) > 10:
        print(f"  ... –∏ –µ—â–µ {len(all_orders) - 10}")
    
    order_input = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é: ").strip()
    if not order_input:
        print("‚ùå –ù–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–æ–≤!")
        return
    
    order_numbers = [num.strip() for num in order_input.split(',') if num.strip()]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
    valid_orders = []
    invalid_orders = []
    
    for order_num in order_numbers:
        if any(str(existing_order).strip() == order_num for existing_order in all_orders):
            valid_orders.append(order_num)
        else:
            invalid_orders.append(order_num)
    
    if invalid_orders:
        print(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –∑–∞–∫–∞–∑—ã: {', '.join(invalid_orders)}")
    
    if not valid_orders:
        print("‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞!")
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—ã –æ—Ç–≥—Ä—É–∑–∫–∏
    shipment_dates = {}
    print("\nüìÖ –í–í–û–î –î–ê–¢ –û–¢–ì–†–£–ó–ö–ò (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024):")
    print("   –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ Enter")
    
    for order_num in valid_orders:
        while True:
            date_str = input(f"–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ {order_num}: ").strip()
            if not date_str:
                use_default = input("  –ù–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –¥–∞—Ç—É –æ—Ç–≥—Ä—É–∑–∫–∏? (y/n): ").strip().lower()
                if use_default == 'y':
                    shipment_dates[order_num] = None
                    break
                else:
                    continue
            
            try:
                shipment_date = datetime.strptime(date_str, '%d.%m.%Y')
                shipment_dates[order_num] = shipment_date
                break
            except ValueError:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    
    # –†–µ–∑–µ—Ä–≤–∏—Ä—É–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    result = planner.reserve_materials(valid_orders, shipment_dates)
    
    if 'status' in result and result['status'] == 'success':
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ –¥–ª—è {len(valid_orders)} –∑–∞–∫–∞–∑–æ–≤")
        reserved_count = len(result.get('reserved_materials', {}))
        print(f"üì¶ –ó–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {reserved_count} –ø–æ–∑–∏—Ü–∏–π")
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤!")

def show_reservations(planner):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è"""
    if not planner.reserved_materials:
        print("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏–π")
        return
    
    print(f"\nüìã –ê–ö–¢–ò–í–ù–´–ï –†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ò–Ø ({len(planner.selected_orders)} –∑–∞–∫–∞–∑–æ–≤):")
    for order_num, order_info in planner.selected_orders.items():
        shipment_date = order_info.get('–î–∞—Ç–∞ –æ—Ç–≥—Ä—É–∑–∫–∏')
        if shipment_date and isinstance(shipment_date, datetime):
            date_str = shipment_date.strftime('%d.%m.%Y')
        else:
            date_str = '–ù–µ —É–∫–∞–∑–∞–Ω–∞'
        client = order_info.get('–ö–ª–∏–µ–Ω—Ç', '–ù–µ —É–∫–∞–∑–∞–Ω')
        print(f"  üöö {order_num} ({client}) - –æ—Ç–≥—Ä—É–∑–∫–∞: {date_str}")
    
    print(f"\nüì¶ –ó–ê–†–ï–ó–ï–†–í–ò–†–û–í–ê–ù–ù–´–ï –ú–ê–¢–ï–†–ò–ê–õ–´ ({len(planner.reserved_materials)} –ø–æ–∑–∏—Ü–∏–π):")
    for material, quantity in list(planner.reserved_materials.items())[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20
        print(f"  üìç {material}: {quantity:.2f}")
    
    if len(planner.reserved_materials) > 20:
        print(f"  ... –∏ –µ—â–µ {len(planner.reserved_materials) - 20} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")

def calculate_requirements(planner):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤ –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö"""
    if not planner.selected_orders:
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã!")
        return
    
    print("\nüßÆ –†–ê–°–ß–ï–¢ –ü–û–¢–†–ï–ë–ù–û–°–¢–ï–ô –í –ú–ê–¢–ï–†–ò–ê–õ–ê–•")
    
    requirements = planner.calculate_material_requirements()
    
    if 'error' in requirements:
        print(f"‚ùå {requirements['error']}")
        return
    
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –î–õ–Ø {len(planner.selected_orders)} –ó–ê–ö–ê–ó–û–í:")
    print("=" * 80)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –ø–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º (–ø–µ—Ä–≤—ã–µ 15)
    materials_shown = 0
    for material, balance in list(requirements['material_balance'].items())[:15]:
        if balance['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö'] > 0:
            print(f"\nüì¶ {material}:")
            print(f"   –¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å: {balance['–¢–µ–∫—É—â–∏–π –∑–∞–ø–∞—Å']:.2f}")
            print(f"   –£–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ: {balance['–£–∂–µ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–æ']:.2f}")
            print(f"   –î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å: {balance['–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ–π—á–∞—Å']:.2f}")
            print(f"   –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö: {balance['–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö']:.2f}")
            
            remaining = balance['–û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ']
            if remaining >= 0:
                print(f"   ‚úÖ –û—Å—Ç–∞—Ç–æ–∫ –ø–æ—Å–ª–µ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è: {remaining:.2f}")
            else:
                print(f"   ‚ùå –î–ï–§–ò–¶–ò–¢: {-remaining:.2f}")
            materials_shown += 1
    
    if len(requirements['material_balance']) > materials_shown:
        print(f"\n... –∏ –µ—â–µ {len(requirements['material_balance']) - materials_shown} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É
    if requirements['purchase_requirements']:
        print(f"\nüö® –¢–†–ï–ë–£–ï–¢–°–Ø –ó–ê–ö–£–ü–ö–ê ({len(requirements['purchase_requirements'])} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤):")
        for material, quantity in list(requirements['purchase_requirements'].items())[:10]:
            print(f"   üìç {material}: {quantity:.2f}")
        
        if len(requirements['purchase_requirements']) > 10:
            print(f"   ... –∏ –µ—â–µ {len(requirements['purchase_requirements']) - 10} –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
    else:
        print(f"\n‚úÖ –í—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –Ω–∞–ª–∏—á–∏–∏!")

def generate_purchase_order(planner):
    """–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∑–∞–∫—É–ø–∫—É"""
    if not planner.selected_orders:
        print("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã!")
        return
    
    requirements = planner.calculate_material_requirements()
    
    if 'error' in requirements:
        print(f"‚ùå {requirements['error']}")
        return
    
    purchase_text, filename = planner.generate_purchase_order(requirements)
    
    print(f"\n‚úÖ –ó–ê–Ø–í–ö–ê –ù–ê –ó–ê–ö–£–ü–ö–£ –°–§–û–†–ú–ò–†–û–í–ê–ù–ê:")
    print("=" * 60)
    print(purchase_text)
    print("=" * 60)
    if filename:
        print(f"üìÑ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
    else:
        print("üìÑ –§–∞–π–ª –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω (–æ—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏)")

if __name__ == "__main__":
    main()
